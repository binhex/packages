name: workflow-package-build-manual

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: 'Enter AUR package to build'
        required: true
        default: 'htpasswd,libtorrent-rasterbar-1_2-git,python2-bin'

jobs:
  package-build:
    runs-on: ubuntu-latest
    env:
      PACKAGE_PATH: "${GITHUB_WORKSPACE}/compiled/amd64"
      AUR_PACKAGES: "${{ github.event.inputs.package_name }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU for multi-arch support
        uses: docker/setup-qemu-action@v3
      - name: Login to GitHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: DEBUG Show Runners environment
        shell: bash
        run: |
          export
      - name: Download AUR package tarball
        shell: bash
        run: |
          cd /tmp || exit 1

          # get package version from PKGBUILD file
          for package in ${{ env.AUR_PACKAGES }}; do
            # download tarball and extract
            if ! stderr=$(curl -o "${package}.tar.gz" -L "https://aur.archlinux.org/cgit/aur.git/snapshot/${package}.tar.gz" && tar -xvf "${package}.tar.gz" -C .); then
              echo "[error] Failed to download AUR package snapshot '${package}' from AUR, error is '${stderr}'" >&2
              exit 1
            fi
          done
      - name: Identify package name and version from extracted tarball file 'PKGBUILD' and save to $GITHUB_ENV
        shell: bash
        run: |
          cd /tmp || exit 1

          for package in ${{ env.AUR_PACKAGES }}; do
            if [[ -f "./${package}/PKGBUILD" ]]; then
              source "./${package}/PKGBUILD"

              # extract package name and version variables from PKGBUILD
              pkgname="${pkgname}"
              pkgver="${pkgver}-${pkgrel}"

              # show details for debug
              echo "[debug] AUR Package '${package}' name is '${pkgname}'"
              echo "[debug] AUR Package '${package}' version is '${pkgver}'"

              # Save to GitHub environment for use in subsequent steps
              echo "${package}=${pkgname},${pkgver}" >> "${GITHUB_ENV}"
            else
              echo "[warn] PKGBUILD file not found for package '${package}'" >&2
            fi
          done

      - name: Build AUR packages using docker image binhex/arch-devel
        shell: bash
        run: |
          cd /tmp || exit 1

          # ensure we have no pre-existing packages, as github re-uses executors
          rm -f *.tar.zst

          echo "Package(s) to build: ${{ env.AUR_PACKAGES }}"
          docker pull binhex/arch-devel:latest
          docker run -v $(pwd):/host -t binhex/arch-devel bash -c "refresh.sh && aur.sh --aur-package '${{ env.AUR_PACKAGES }}' --package-path '/host'"
      - name: DEBUG Showing compiled package(s) on host filesystem
        shell: bash
        run: |
          cd /tmp || exit 1

          echo "[debug] Working in directory: $(pwd)"
          if ! ls -la *.tar.zst 2>/dev/null; then
            echo "[info] No tar.zst files found - no packages were built, exiting workflow"
            exit 0
          fi
      - name: Remove all versioning information from the package filenames and move to workspace
        shell: bash
        run: |
          cd /tmp || exit 1

          # fix ownership of the compiled packages and destination directory
          sudo chown -R $(id -u):$(id -g) *.tar.zst "${{ env.PACKAGE_PATH }}"

          # Use the package names saved from PKGBUILD files
          for package in ${{ env.AUR_PACKAGES }}; do
            # Get the package name from environment variable (format: "name,version")
            package_info=$(printenv "${package}" 2>/dev/null || echo "")
            if [[ -n "${package_info}" ]]; then
              IFS=',' read -r pkg_name pkg_version <<< "${package_info}"

              # Find the compiled package file that matches this package
              for filepath in *.tar.zst; do
                if [[ "${filepath}" == "${pkg_name}"-* ]]; then
                  final_name="${pkg_name}-x86_64.pkg.tar.zst"
                  echo "[info] Moving '${filepath}' to '${{ env.PACKAGE_PATH }}/${final_name}'"
                  mv "${filepath}" "${{ env.PACKAGE_PATH }}/${final_name}"
                  break
                fi
              done
            fi
          done
      - name: Commit and push packages to currently checked out GitHub repository
        shell: bash
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add "${{ env.PACKAGE_PATH }}/"*.tar.zst
          if git commit -m "Added compiled AUR package(s): ${{ github.event.inputs.package_name }}"; then
            git push
            echo "Pushed compiled package(s) to GitHub repository."
          else
            echo "No changes to commit."
          fi
